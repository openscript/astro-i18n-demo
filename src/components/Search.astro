---
import { getLocaleFromUrl, useTranslations } from '../i18n';

export type Props = {
  readonly id?: string;
  readonly className?: string;
  readonly query?: string;
  readonly uiOptions?: Record<string, any>;
};

const { id, className, query = {} } = Astro.props;
const bundlePath = import.meta.env.DEV
  ? "/pagefind/"
  : `${import.meta.env.BASE_URL}/pagefind/`;
const locale = getLocaleFromUrl(Astro.url);
const t = useTranslations(locale);
---

<div
  id={id}
  class:list={[className, "pagefind-init"]}
  data-bundle-path={bundlePath}
  data-query={query}
>
  <input type="search" placeholder={t('search.placeholder')} />
</div>

<style>
  input[type="search"] {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--gray-color);
    border-radius: 0.25rem;
  }
</style>

<script>
  const searchWrapper = document.querySelector(".pagefind-init");
  const searchInput = document.querySelector('.pagefind-init input[type="search"]');
  searchInput?.addEventListener("focus", initPagefind);
  searchInput?.addEventListener("input", search);

  async function initPagefind() {
    if (
      globalThis.pagefind ||
      !searchWrapper ||
      !(searchWrapper instanceof HTMLElement) ||
      !searchWrapper.dataset.bundlePath
    ) {
      return;
    }

    globalThis.pagefind = await import(/* @vite-ignore */ `${searchWrapper.dataset.bundlePath}/pagefind.js`);
    globalThis.pagefind?.init();
  }

  async function search(e: Event) {
    if (
      !globalThis.pagefind ||
      !e.target ||
      !(e.target instanceof HTMLInputElement)
    ) {
      return;
    }

    const records = await globalThis.pagefind.debouncedSearch(e.target.value);

    if (records?.results) {
      console.log(records.results);
    }
  }
</script>
