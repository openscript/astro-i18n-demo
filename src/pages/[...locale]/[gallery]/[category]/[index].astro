---
import type { InferGetStaticPropsType, GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import DefaultLayout from "../../../../layouts/DefaultLayout.astro";
import { C } from "../../../../configuration";
import { getLocaleSlug } from "../../../../i18n";
import { parseLocale } from "../../../../i18n";
import { joinPath } from "../../../../path";
import slug from "limax";
import { Image } from "astro:assets";

export const getStaticPaths = (async () => {
  const categories = await getCollection("gallery");
  const locales = Object.keys(C.LOCALES);
  const paths = categories.flatMap((category) => {
    const pages = locales.flatMap((l) => {
      const locale = parseLocale(l);
      const localeSlug = getLocaleSlug(locale);
      const gallerySlug = C.MESSAGES[locale]["slugs.gallery"];
      const categorySlug = slug(category.data.title[locale] ?? category.data.title[C.DEFAULT_LOCALE]);
      return category.data.images.map((image, index) => {
        return {
          params: {
            locale: localeSlug,
            gallery: gallerySlug,
            category: categorySlug,
            index: index.toString(),
          },
          props: { locale, page: image },
        };
      });
    });

    return pages.map((p) => ({
      ...p,
      props: {
        ...p.props,
        translations: pages.reduce(
          (acc, pp) => ({
            ...acc,
            [pp.props.locale]: `/${joinPath(
              pp.params.locale,
              pp.params.gallery,
              pp.params.category,
            )}`,
          }),
          {} as Record<string, string>,
        ),
      },
    }));
  });

  return paths;
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { page, translations, locale } = Astro.props as Props;
---

<DefaultLayout translations={translations} currentLocale={locale}>
	<h1>Bild</h1>
  <Image src={page.src} alt={`Photo: ${page.title}`} width={1920} />
</DefaultLayout>
