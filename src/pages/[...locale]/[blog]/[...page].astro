---
import type { GetStaticPaths, InferGetStaticParamsType, InferGetStaticPropsType } from "astro";
import { getCollection } from "astro:content";
import { C } from "../../../configuration";
import DefaultLayout from "../../../layouts/DefaultLayout.astro";
import { getRelativePath, resolvePath } from "../../../path";
import { getContentEntryPath } from "../../../i18n";
import Image from "astro/components/Image.astro";
import defaultCover from "../../../assets/default-cover.jpg";
import slug from "limax";

export const getStaticPaths = (async ({ paginate }) => {
  const pages = (await getCollection("blog")).reverse();
  const locales = Object.keys(C.LOCALES);

  const translations = locales.reduce<Record<string, string>>(
    (acc, l) => {
      acc[l] = l === C.DEFAULT_LOCALE ? `/blog` : `/${l}/blog`;
      return acc;
    },
    {},
  );

  return locales.flatMap((l) => {
    const locale = l === C.DEFAULT_LOCALE ? undefined : l;
    return paginate(pages, {
      pageSize: C.SETTINGS.BLOG.PAGE_SIZE,
      params: { locale, blog: "blog" },
      props: { locale: l, translations },
    });
  });
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
const { page, locale, translations } = Astro.props as Props;
type Params = InferGetStaticParamsType<typeof getStaticPaths>;
const { locale: localeSlug, blog: blogSlug } = Astro.params as Params;
---

<style>
  img {
    width: 600px;
    height: 320px;
    object-fit: cover;
  }
</style>

<DefaultLayout translations={translations} currentLocale={locale}>
  <h1>Blog (Page {page.currentPage})</h1>
  <ul>
    {
      page.data.map(async (post) => (
        <li>
          <a href={await getContentEntryPath("blog", post.slug)}>
            <Image src={post.data.cover?.src || defaultCover} alt={post.data.cover?.alt || post.data.title} widths={[720]} />
            {post.data.title}
            {`${new Date(post.data.publishedAt).toLocaleDateString(locale)} ${new Date(post.data.publishedAt).toLocaleTimeString(locale)}`}
          </a>
          <div>
            {post.data.tags.map((tag) => (
              <a href={resolvePath(localeSlug, blogSlug, slug(tag))}>{tag}</a>
            ))}
          </div>
        </li>
      ))
    }
  </ul>
  {
    page.url.prev ? (
      <a href={getRelativePath(page.url.prev)}>Vorherige Seite</a>
    ) : null
  }
  {
    page.url.next ? (
      <a href={getRelativePath(page.url.next)}>NÃ¤chste Seite</a>
    ) : null
  }
</DefaultLayout>
